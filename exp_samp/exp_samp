{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2ceaeda9",
   "metadata": {},
   "source": [
    "# 作业二：实现蓄水池抽样算法"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d2b8410",
   "metadata": {},
   "source": [
    "蓄水池抽样算法作用在于针对海量的流式数据做到公平，保证每个元素被取样的概率相同。"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b116ca25",
   "metadata": {},
   "source": [
    "## 蓄水池算法原理"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5eae29de",
   "metadata": {},
   "source": [
    "**假设蓄水池的容量为K。**\n",
    "对于第i个元素(i<=K)，在第K步之前被选中的概率为1。在K+1步被替换的概率为$ \\frac{k}{k+1} * \\frac{1}{K} = \\frac{1}{K+1} $ ,则被保留的概率为$ 1-\\frac{1}{K+1} = \\frac{K}{K+1} $。可以推导在K+2、K+3、...、N步时，第i个元素任被保留的概率为：$$ 1 * \\frac{K}{K+1} * \\frac{K+1}{K+2} * \\frac{K+2}{K+3} * ... * \\frac{N-1}{N} = \\frac{K}{N} $$\n",
    "\n",
    "对于第i个元素(i>K)，在第i步被选中的概率为$ \\frac{K}{i} $，在i+1步不被替换的概率为 $ 1 - \\frac{K}{i+1} * \\frac{1}{K} = \\frac{i}{i+1} $，运行到第N步保留的概率为：$$ \\frac{K}{i} * \\frac{i}{i+1} * \\frac{i+1}{i+2} * ... * \\frac{N-1}{N} = \\frac{K}{N} $$\n",
    "\n",
    "所以对于其中每个元素，被保留的概率都为$ \\frac{K}{N} $"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c8604d7",
   "metadata": {},
   "source": [
    "## 算法过程"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfc7cc53",
   "metadata": {},
   "source": [
    "假设数据序列的规模为 N，需要采样的数量的为 K。综上所述：\n",
    "\n",
    "1. 当i<=K的情况，元素被选中的概率为1，直接放入蓄水池。\n",
    "2. 当i>K时，元素以$ \\frac{K}{i} $的概率被选中，并替换蓄水池中的某个元素\n",
    "3. 返回蓄水池\n",
    "\n",
    "算法时间复杂度为$ Big O = N $"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fee7950",
   "metadata": {},
   "source": [
    "## 代码实现"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "67192ed3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import random\n",
    "from unittest import TestCase\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "class ReservoirSample(object):\n",
    "    def __init__(self, capacity):\n",
    "        # 记录第几个元素\n",
    "        self.__counter = 0\n",
    "        # 蓄水池容量\n",
    "        self.__capacity = capacity\n",
    "        # 蓄水池\n",
    "        self.__samples = []\n",
    "\n",
    "    def samp(self, item):\n",
    "        self.__counter += 1\n",
    "        # 当i<=K的情况\n",
    "        if len(self.__samples) < self.__capacity:\n",
    "            # 直接放入蓄水池\n",
    "            self.__samples.append(item)\n",
    "            return self.__samples\n",
    "        # 当i>K的情况\n",
    "        r = random.randrange(0, self.__counter)\n",
    "        # 元素以 𝐾/𝑖 的概率被选中\n",
    "        if r < self.__capacity:\n",
    "            # 替换蓄水池元素\n",
    "            self.__samples[r] = item\n",
    "        return self.__samples"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e93a4221",
   "metadata": {},
   "source": [
    "## 设计测试"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "beb47798",
   "metadata": {},
   "source": [
    "1. 生成数据集(产生1000000个1-10的序列，则1000000个数)\n",
    "2. 使用蓄水池采样100000个元素\n",
    "3. 生成图表观察采样情况\n",
    "\n",
    "预计结果：1-10每个元素的个数约为10000，被选中概率约为10%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "04216ad9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "统计数据:[(1, 9853), (2, 9989), (3, 9999), (4, 9906), (5, 10015), (6, 9991), (7, 10038), (8, 10090), (9, 10032), (10, 10087)]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from unittest import TestCase\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "def generate_data_set():\n",
    "    data_set = []\n",
    "    for i in range(1000000):\n",
    "        for j in range(1, 11):\n",
    "            data_set.append(j)\n",
    "    return data_set    \n",
    "    \n",
    "def total(arr) -> []:\n",
    "    data_dict = {}\n",
    "    for item in arr:\n",
    "        if data_dict.get(item) is not None:\n",
    "            data_dict[item] += 1\n",
    "        else:\n",
    "            data_dict[item] = 1\n",
    "    return data_dict\n",
    "\n",
    "\n",
    "class TestReservoirSample(TestCase):\n",
    "    def test_samp(self):\n",
    "        data_set = generate_data_set()\n",
    "        samples = []\n",
    "        rs = ReservoirSample(100000)\n",
    "        for item in data_set:\n",
    "            samples = rs.samp(item)\n",
    "        t = sorted(total(samples).items(), key=lambda item: item[0])\n",
    "        print(\"统计数据:{}\".format(t))\n",
    "        labels = [x[0] for x in t]\n",
    "        sizes = [x[1] for x in t]\n",
    "        plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=False, startangle=90)\n",
    "        plt.show()\n",
    "    \n",
    "if __name__ == '__main__':\n",
    "    TestReservoirSample().test_samp()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4460ba48",
   "metadata": {},
   "source": [
    "## 总结"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e599d363",
   "metadata": {},
   "source": [
    "根据测试的结果，蓄水池算法的实现没有出现错误，每个元素被选中的概率相同。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
